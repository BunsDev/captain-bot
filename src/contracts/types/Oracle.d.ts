/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type GovernanceUpdated = ContractEventLog<{
  oldGovernance: string;
  newGovernance: string;
  0: string;
  1: string;
}>;
export type ULMStateUpdated = ContractEventLog<{
  oldUlmState: string;
  newUlmState: string;
  0: string;
  1: string;
}>;

export interface Oracle extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Oracle;
  clone(): Oracle;
  methods: {
    DAI(): NonPayableTransactionObject<string>;

    LIQUIDITY_VALIDATION_AMOUNT(): NonPayableTransactionObject<string>;

    PILOT(): NonPayableTransactionObject<string>;

    UNISWAP_FACTORY(): NonPayableTransactionObject<string>;

    USDC(): NonPayableTransactionObject<string>;

    USDT(): NonPayableTransactionObject<string>;

    WETH(): NonPayableTransactionObject<string>;

    assetToEth(
      token: string,
      fees: number | string | BN,
      amountIn: number | string | BN
    ): NonPayableTransactionObject<string>;

    checkPoolLiquidity(
      token0: string,
      token1: string,
      amount0: number | string | BN,
      amount1: number | string | BN
    ): NonPayableTransactionObject<string>;

    checkPoolValidation(
      token0: string,
      token1: string,
      amount0: number | string | BN,
      amount1: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    ethToAsset(
      tokenOut: string,
      fees: number | string | BN,
      amountIn: number | string | BN
    ): NonPayableTransactionObject<string>;

    getPilotAmount(
      token: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    getPilotAmountForTokens(
      token0: string,
      token1: string,
      amount0: number | string | BN,
      amount1: number | string | BN
    ): NonPayableTransactionObject<string>;

    getPilotAmountWethPair(
      tokenAlt: string,
      altAmount: number | string | BN,
      wethAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    getPrice(
      tokenA: string,
      tokenB: string,
      _poolFee: number | string | BN,
      _amountIn: number | string | BN
    ): NonPayableTransactionObject<string>;

    getTokenStablePairWithMaxLiquidity(
      token: string
    ): NonPayableTransactionObject<string>;

    getTokenWethPairWithMaxLiquidity(
      token: string
    ): NonPayableTransactionObject<string>;

    getUSDAmount(
      pool: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    getWETHAmount(
      pool: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    governance(): NonPayableTransactionObject<string>;

    pilotAmountForFees(
      token0: string,
      token1: string,
      amount0: number | string | BN,
      amount1: number | string | BN,
      percentage: number | string | BN
    ): NonPayableTransactionObject<string>;

    setGovernance(_governance: string): NonPayableTransactionObject<void>;

    setUlmState(_ulmState: string): NonPayableTransactionObject<void>;

    ulmState(): NonPayableTransactionObject<string>;
  };
  events: {
    GovernanceUpdated(cb?: Callback<GovernanceUpdated>): EventEmitter;
    GovernanceUpdated(
      options?: EventOptions,
      cb?: Callback<GovernanceUpdated>
    ): EventEmitter;

    ULMStateUpdated(cb?: Callback<ULMStateUpdated>): EventEmitter;
    ULMStateUpdated(
      options?: EventOptions,
      cb?: Callback<ULMStateUpdated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "GovernanceUpdated", cb: Callback<GovernanceUpdated>): void;
  once(
    event: "GovernanceUpdated",
    options: EventOptions,
    cb: Callback<GovernanceUpdated>
  ): void;

  once(event: "ULMStateUpdated", cb: Callback<ULMStateUpdated>): void;
  once(
    event: "ULMStateUpdated",
    options: EventOptions,
    cb: Callback<ULMStateUpdated>
  ): void;
}
